# Generated by Django 4.1.7 on 2023-03-17 16:49

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CalidadProducto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_calidad', models.CharField(max_length=200)),
                ('usuario_crea', models.CharField(max_length=20)),
                ('fecha_crea', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Empresa',
            fields=[
                ('rut_empresa', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('nombre_empresa', models.CharField(max_length=100, verbose_name='Empresa')),
                ('correo_empresa', models.CharField(blank=True, max_length=300, null=True)),
                ('estado_empresa', models.BooleanField(blank=True, null=True)),
                ('fecha_vigencia', models.DateField(blank=True, null=True)),
                ('fecha_crea', models.DateField(auto_now_add=True)),
                ('usuario_crea', models.CharField(blank=True, max_length=20, null=True)),
                ('nombre_fantasia', models.CharField(blank=True, max_length=100, null=True)),
                ('ciudad', models.CharField(blank=True, max_length=100, null=True)),
                ('telefono', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'EMPRESA',
            },
        ),
        migrations.CreateModel(
            name='Producto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_producto', models.CharField(max_length=300, verbose_name='Producto')),
                ('descripcion_producto', models.CharField(blank=True, max_length=500, null=True)),
                ('espesor_producto', models.FloatField(blank=True, null=True)),
                ('ancho_producto', models.FloatField(blank=True, null=True)),
                ('largo_producto', models.FloatField(blank=True, null=True)),
                ('usuario_crea', models.CharField(max_length=20)),
                ('fecha_crea', models.DateField(auto_now_add=True)),
                ('calidad_producto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.calidadproducto', verbose_name='Calidad de Producto')),
            ],
            options={
                'db_table': 'PRODUCTO',
            },
        ),
        migrations.CreateModel(
            name='ProductosEmpresa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_producto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.producto')),
                ('rut_empresa', models.ForeignKey(db_column='rut_empresa', on_delete=django.db.models.deletion.CASCADE, to='core.empresa')),
            ],
            options={
                'db_table': 'PRODUCTOS_EMPRESA',
            },
        ),
        migrations.AddField(
            model_name='empresa',
            name='productos',
            field=models.ManyToManyField(through='core.ProductosEmpresa', to='core.producto'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('rut', models.CharField(max_length=20, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('rut_empresa', models.ForeignKey(db_column='rut_empresa', on_delete=django.db.models.deletion.CASCADE, to='core.empresa')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
